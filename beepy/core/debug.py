# $Id: debug.py,v 1.9 2007/09/03 03:20:03 jpwarren Exp $
# $Revision: 1.9 $
#
# BEEPy - A Python BEEP Library
# Copyright (c) 2002-2007 Justin Warren <daedalus@eigenmagic.com>

"""
Customised debugging code.

@version: $Revision: 1.9 $
@author: Justin Warren
"""

import logging
import os
import sys

class MyLogger(logging.Logger):
    """
    MyLogger is a customised logging class used to debug BEEPy.
    It logs to a file beepy-debug.log by default so that when
    people run the testsuite they don't see all the standard
    ERROR and WARNING type messages generated by the negative
    tests.
    """

    def __init__(self, name):
        pid = os.getpid()

        ## Check to see if we're using the twisted logger
        ## and don't log as verbosely if we are, since the twisted
        ## logger already spews an imperial bucketload of information.
        ## We prefer the metric system, but what can you do?
        ## Those crazy Americans!
        if sys.modules.has_key('twisted.python.log'):
#            FORMAT = "%(module)11s %(levelname)7s: %(name)s: %(message)s"
            FORMAT = "%(module)15s %(levelname)7s: %(message)s"
        else:
#            FORMAT = "%(asctime)s [" + str(pid) + "] %(levelname)8s: %(name)s: %(message)s"
            FORMAT = "%(asctime)s [" + str(pid) + "] %(module)15s %(levelname)7s: %(message)s"

        #level = logging.DEBUG
        level = logging.INFO
        logging.Logger.__init__(self, name, level)

#        handler = logging.StreamHandler()

        ## Open a file for debug logging, overwriting any
        ## previous logfile.
        handler = logging.FileHandler('beepy-debug.log', 'w')

        formatter = logging.Formatter(FORMAT)
        handler.setFormatter(formatter)
        self.addHandler(handler)
        return

logging.setLoggerClass(MyLogger)
log = logging.getLogger('default')
