# $Id: CHANGES,v 1.21 2004/08/02 09:46:08 jpwarren Exp $
# $Revision: 1.21 $
#
#    BEEPy - A Python BEEP Library
#    Copyright (C) 2002-2004 Justin Warren <daedalus@eigenmagic.com>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

0.4 -> 0.5
----------
- Now using epydoc for code documentation.
- SEQ frame processing implemented. This enables frame fragmentation
  and the basic pre-requisites for implementing per-channel throttling.
- Very basic channel priority mechanism that makes use of SEQ frames
  implemented. Extreme beta! Beware!
- Basic non-twisted transport code. Bare bones functionality only.
  Likely to contain plenty of bugs. Use twisted folks, it rocks.
- Refactored transport layer code into 3 modules:
  beepy.transports.base: basic non-twisted transport code.
  beepy.transports.tcp: Majority of TCP related transport code.
  beepy.transports.tls: TLS specific code
- Moved message.py, mgmtparser.pt and mgmtcreator.py to beepy.profiles
  where they should have been.
- Logging streamlined somewhat.
- More asynchronous API migration work. DEBUG mode is still very verbose.
- BeepClientFactory no longer calls reactor.stop() in clientConnectionLost()
  or clientConnectionFailed(). You can no take other actions if you wish.
  Example servers now implement their own test protocol to cause the server
  to exit when the single client session disconnects.
- Fixed bug in Channel where the msgno would be deallocated for message
  types other than ANS or RPY.
- Fixed bug where SEQ frames would be sent during Tuning Reset that
  interfere with the transport protocol setup for TLS.
- Added channel close error callback triggering to beepmgmtprofile.

0.3 -> 0.4
----------
- Migrated to twisted framework as core engine.
- TLS support!
- SASL ANONYMOUS support refactored
- SASL OTP support refactored
- Many example clients and servers used in testing
- Improved logging, now with customisable prefix format and shorter
  time output.
- Cleaner inheritance model
- tracebacks appear in logfiles for ease in debugging.
- Added the capability to pass a callback to a profile that will
  get called last from the Profile.__init__() method.

0.2a -> 0.3
------------
- distutils now used for packaging and install.
- Test scripts moved to top level directory.
- SASL/OTP basics implemented. Implementation to be completed and
  more thoroughly tested and bugfixed.
- Fixed bugs in SASL/ANONYMOUS with client/server interaction and 
  channel/session closure.
- Fixed a bug in tcpsession.py so that if a frame is received and
  the payload is longer than specified in the header the session
  is dropped immediately. Previously it would only check sizes after
  a complete frame was received or the input buffer was full. It now
  implements the correct behaviour which is also more robust against
  attempted Denial of Service attacks.
- Test scripts do fairly complete testing of the BEEP framing
  implemented by BEEPy.

0.1a -> 0.2a
------------
- mgmtparser.py Parser now ignores whitespace outside element tags, thus
  creating fewer elements within a dom.document, saving on memory.
- Re-implemented Session as a finite state machine. Session is now a subclass 
  of StateMachine with a defined set of states and reasons to transition. 
  Transports define the details of the state transitions by implementing the 
  state handlers.
- Start and close of channels works for successful cases between an Initiator
  and a Listener. Error handling is minimal.
- The use of Channel.deallocateMsgno() is now expected to be performed by a
  Channel's Profile to ensure that messages are only marked as completely
  received once the Profile is ready, rather than when they get placed onto
  the Channel queue.
- tcpsession.TCPCommsMixin.getInputFrame() now correctly processes multiple
  frames received within a single datablock instead of just the first one.
- Added an example client/server implementation using BEEPy and the Echo
  profile. Walkthrough of how to use the library in doc/HOWTO uses it as
  an example.
