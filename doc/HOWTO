# $Id: HOWTO,v 1.4 2004/01/06 04:18:08 jpwarren Exp $
# $Revision: 1.4 $
#
#    BEEPy - A Python BEEP Library
#    Copyright (C) 2002 Justin Warren <daedalus@eigenmagic.com>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

So, you've decided you want to use BEEPy for something. Cool! I've
tried to make BEEPy as easy as possible to use, as I use it myself and
I'm inherently lazy. 95% of the BEEP stuff is handled by the library,
so hopefully you won't need to play with any of that. You should
really only need to deal with the specifics of your application and
make a couple of calls into the BEEP library to handle certain events.

Please note that BEEPy is still under heavy development so the API is
a bit rough at the moment. The aim is to write more convenience
functions as the library stabilises to make writing applications with
it as painless as possible.

BEEP Basics
-----------
BEEPy functions by making point-to-point connections between two BEEP
components, an Initiator and a Listener (or client and server, if you
prefer). Depending on the role of each part of your code, you will need
to instanciate a Listener or an Initiator. There needs to be a BEEP
Listener out there somewhere for you to talk to, though not necessarily
one written using BEEPy.

Over each of those point-to-point connections, BEEP allows you to use
multiple Channels. Each Channel functions more or less independently
from one another, with Channel 0 reserved for administrative commands.
Check RFC3080 for a more indepth explanation of this.

A Simple Example - an Echo server
---------------------------------
The canonical simple case of client/server programming: a server that
echos back whatever you send it. With BEEP, this is a little different,
but the principles are the same. In this case, we're going to build a
server that understands the Echo profile (more on profiles in a moment).
When the server receives a BEEP MSG frame, it will respond with a RPY
frame containing the contents of the MSG frame copied verbatim. That's it.

There's some example code for you to look at while you follow this HOWTO,
so look now in test/echoserver.py. As always, the first thing we do
is to load the appropriate modules that we want to use. Note the line
loading the echoprofile from beepy.profiles. echoprofile is a module
supplied with BEEPy as an example of how to use BEEPy profiles to
implement services.

As you know, whenever you create a channel in BEEP you associate (or bind)
a certain profile to it that defines the communications protocol on that
profile. When a BEEPy Listener or Initiator is created, it automatically
creates Channel 0 and binds it to the BEEP Management profile.

BEEPy Profiles
--------------
In order to use our Echo protocol, we need to build a profile for it.
Have a look now at beepy/profiles/echoprofile. Since we're implementing a
profile, we need to inherit from beep.profiles.profile.Profile which
defines all the base profile behaviour. Note the line:

__profileClass__ = "EchoProfile"

This is vitally important for how BEEPy manages the dynamic management of
profiles. BEEPy searches for this string to identify the entry point to
the profile class. If this line is missing or wrong, BEEPy won't know how
to instanciate your profile class.

Now we have our actual class definition, inheriting from profile.Profile
and setting the uri used to refer to this profile, as defined by the
BEEP standard.

Then we define a single method: processFrame(). This method is called by
whenever a frame arrives from a peer that is destined for this profile.
In the example, we log it so that you can see what's going on in the
example. You'd leave this logging line out normally.

Now comes the meat of our protocol definition. If the frame we received
is a MSG frame, we send a reply frame (using channel.sendReply) with the
same msgno as the frame (since this is the message number we're replying to)
and the same contents as the frame (theframe.payload).

Easy right? Ah, but we're not quite finished. A conversation takes two
sides: a speaker and a listener. Since a channel has to have the same
profile on both ends, we need to cater for both when we receive a MSG
as a listener, and when we receive the corresponding RPY as a speaker.
Otherwise, we'd have to have a special 'speaker' version of the Echo
profile and another 'listener' version. That's nearly double the code.
What a drag!

So, we handle both cases in this profile. If we receive a RPY frame, we
assume it's a RPY to a MSG we sent. Since BEEP keeps track of sent MSGs,
we need to acknowledge receipt of the RPY. If we don't, when we try to
close the channel, BEEPy will raise an exception telling us that there are
unacknowledged messages in the channel. This is part of the reliability
of BEEP. Cool huh? So, when we receive a RPY frame, we call 
channel.deallocateMsgno() with the frame's msgno as the argument.

There's one last part, which is to determine when we've finished
processing. This might be to receive a frame containing the text
'QUIT' or 'BYE', such as in SMTP and FTP, but with our echo protocol
we just decide that we'll stop listening after we receive 5
replies. So, once we receive more than 5 replies, we ask the session
to shutdown().

Note that this profile doesn't do a lot of error handling (for example,
a RPY frame to a MSG that we didn't sent would be silently ignored) but
it doesn't really matter in this example. If an Exception were to occur,
BEEPy will drop the connection.

Finishing the Server
--------------------
With our profile done, we've completed the hard part of writing our
server. Now we just need to set up a Listener to listen for incoming
BEEP connections and set it up to handle the echo profile. So, let's
go back to test/echoserver.py.

With the magic of the twisted framework, most of the work has already
been done for us. We import our profile, a BeepServerFactory which
will handle incoming connections, and a couple of twisted framework
components so we can created a twistd application. There's some extra
debugging code in the example so that you can see how you might
override debugging yourself.

We create a new BeepServerFactory() and then add a single profile to
it. This tells the factory which profiles it should advertise to other
BEEP peers, and which ones it supports when other peers ask for one.

The last three lines create a twisted application that listens on port
1976 for incoming connections. It also has a simple name: echobeep
To start the server, at the command line enter:

twistd -ny echoserver.py

That's it. You've just built a server using BEEPy. Easy, wasn't it?

Building a Client
-----------------
No client/server system would be complete without a client. You could test
the server by connecting with telnet and entering BEEP frames by hand, but
that's slow, tedious, and a right royal pain. Instead, let's use the
handy client code provided by BEEPy. Have a look in test/echoclient.py
while you read this.

First off, we import the echoprofile so that we can support it. Then
we import our two client modules: BeepClientProtocol and
BeepClientFactory. Finally, we import the twisted reactor to run our
client code for us.

We firstly need to define how we're going to handle various events
with our client, which we do by overriding some methods from
BeepClientProtocol. We define what to do when the greeting is received
from the Listener after we connect to it with greetingReceived(). In
this case we want to start a new channel using the echoprofile.

We also define what we do when a channel is successfully started. We
simply get a reference to the channel object relating to the new
channel and use it to send some messages.

We then define a Factory that uses our newly defined protocol. Then
all that's left is to define what happens when you run the program,
which is to create an EchoClientFactory which supports the
echoprofile. Then, using the twisted reactor, we connect to our remote
server using our factory to handle the connection.

So, there you have it. A simple client that connects to a BEEP server,
starts a channel using the Echo profile, sends a few messages over the
channel and then closes the channel and disconnects. You've now implemented
your first client/server program with BEEPy.

For more advanced client/server scenarios, check out the various
*server.py and *client.py code in test/. If there's something you
don't know how to do, or are having trouble with, drop us a line via
one of the beepy lists at sourceforge, or email
jpwarren@users.sourceforge.net.

Happy coding!
