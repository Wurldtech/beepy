# $Id: TODO,v 1.15 2003/01/08 07:14:02 jpwarren Exp $
# $Revision: 1.15 $
#
#    BEEPy - A Python BEEP Library
#    Copyright (C) 2002 Justin Warren <daedalus@eigenmagic.com>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file tracks items that are outstanding as a sort of scratch monkey
# used during coding sessions so I can keep track of things that occur to
# me while doing something else. It's easier to import into CVS than
# yellow sticky notes. :)

- beep.core.message should probably be moved to beep.core.profiles since
  message is an enabling class for the BEEPMgmtProfile class. mgmtcreator
  and mgmtparser can probably be moved too, since the mgmt thingo is
  structured in as a profile, not core anymore.
- If we define the URI for a profile when we add it to a ProfileDict, 
  why does the Profile have a uri attribute? Completeness?
- Where does fragmentation get handled? Probably should be in the
  transport code somewhere, so we need to be careful with buffer overflows
  in the rest of the code. This is for sending of frames only as frame
  reassembly works correctly on reception, including DoS prevention
  and checking for buffer overflow.
- Add profile priorities for when a client might ask to start a channel
  and give a list of profiles. The server will then pick the one that it
  knows about that has the highest priority. This allows the server to
  prefer SASL/OTP over SASL/ANONYMOUS, for example.
- Scheduling is now more asynchronous due to a better threading model.
  It would still be nice to have priority levels for processes, but I
  think I might leave this until later. It could be implemented by
  overriding processFrames() in a subclass of Session. Currently it's
  a simple round-robin algorithm.
- Need to implement SEQ frame processing now that I understand it as a
  mechanism to partition the total bandwidth of a TCP session among the
  channels, similar to IP/MPLS ToS/QoS stuff for data and VoIP.
- Should probably modify all the logmsg() calls to have an 
  import * from logging at the top so you don't have to type 
  logging.LOG_DEBUG all the time, which is a drag.
- Possibly modify the parameter ordering to permit a default logging level
  of DEBUG, so if you don't explicitly say so, it's a debug statement.
  More for convenience while coding than anything else.
- Much work on test scripts required. This is now a priority.
- Go through code and remove unused methods after threading re-organisation.
- Investigate clean exiting on CTRL-C in unittests, just in case something
  dies. It's a pain to have to CTRL-Z and kill the job when debugging.
- Add a Stress and Volume test to the test suite to see how the library
  performs under load. This will probably have to wait a little while until
  the library is a little bit more stable.
- The max_concurrent processing section of TCPSession should be moved into
  core.session and apply to both InitiatorManagers and ListenerManagers.
