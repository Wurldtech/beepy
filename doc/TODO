# $Id: TODO,v 1.18 2004/01/06 04:18:08 jpwarren Exp $
# $Revision: 1.18 $
#
#    BEEPy - A Python BEEP Library
#    Copyright (C) 2002 Justin Warren <daedalus@eigenmagic.com>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file tracks items that are outstanding as a sort of scratch monkey
# used during coding sessions so I can keep track of things that occur to
# me while doing something else. It's easier to import into CVS than
# yellow sticky notes. :)

- Refactor code in default transport classes to provide a non-twisted
  asyncore based implementation.
- Allow auto-selection of twisted implementation if available, and
  fall back to basic asyncore implementation if it isn't.
- beep.core.message should probably be moved to beep.core.profiles since
  message is an enabling class for the BEEPMgmtProfile class. mgmtcreator
  and mgmtparser can probably be moved too, since the mgmt thingo is
  structured in as a profile, not core anymore.
- Where does fragmentation get handled? Probably should be in the
  transport code somewhere, so we need to be careful with buffer overflows
  in the rest of the code. This is for sending of frames only as frame
  reassembly works correctly on reception, including DoS prevention
  and checking for buffer overflow.
- Add profile priorities for when a client might ask to start a channel
  and give a list of profiles. The server will then pick the one that it
  knows about that has the highest priority. This allows the server to
  prefer SASL/OTP over SASL/ANONYMOUS, for example.
- Need to implement SEQ frame processing now that I understand it as a
  mechanism to partition the total bandwidth of a TCP session among the
  channels, similar to IP/MPLS ToS/QoS stuff for data and VoIP.
- Much work on test scripts required.
- Add a Stress and Volume test to the test suite to see how the library
  performs under load. This will probably have to wait a little while until
  the library is a little bit more stable.
